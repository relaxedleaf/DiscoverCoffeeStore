import { ACTION_TYPES, StoreContext } from '../store/storeContext';
import { useContext, useEffect, useState } from 'react';

import Banner from '../components/banner/banner';
import Card from '../components/card/card';
import CoffeeStore from './types/CoffeeStore';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import fetchCoffeeStores from '../lib/coffee-store';
import styles from '../styles/Home.module.css';
import useTrackLocation from '../hooks/useTrackLocation';

export const getStaticProps: GetStaticProps = async (context) => {
	const coffeeStores = await fetchCoffeeStores();
	return {
		props: {
			coffeeStores,
		}, // Will be passed to the page component as props
	};
};

const DEFAULT_BUTTON_TEXT = 'View stores nearby';
const Home = ({ coffeeStores }: { coffeeStores: Array<CoffeeStore> }) => {
	const { handleTrackLocation, locErrorMSg, isFindingLocation } =
		useTrackLocation();
	const [btnText, setBtnText] = useState(DEFAULT_BUTTON_TEXT);

	const {
		dispatch,
		state: { coffeeStoresNearMe, latLong },
	} = useContext(StoreContext);

	const [coffeeStoresError, setCoffeeStoresError] = useState<string>('');

	useEffect(() => {
		if (isFindingLocation) {
			setBtnText('Locating...');
		} else {
			setBtnText(DEFAULT_BUTTON_TEXT);
		}
	}, [isFindingLocation]);

	useEffect(() => {
		let mounted = true;
		if (latLong) {
			try {
				fetchCoffeeStores(latLong, 30).then((stores) => {
					if (mounted) {
						dispatch({
							type: ACTION_TYPES.SET_COFFEE_STORES,
							payload: {
								coffeeStoresNearMe: stores,
							},
						});
					}
				});
			} catch (err: any) {
				if (typeof err === 'string') {
					setCoffeeStoresError(err);
				} else if (err instanceof Error) {
					setCoffeeStoresError(err.message);
				} else {
					setCoffeeStoresError('Unknown coffee store error');
				}
			}
		}
		return () => {
			mounted = false;
		};
	}, [latLong]);

	const handleOnBannerBtnClick = () => {
		handleTrackLocation();
	};

	return (
		<>
			<Head>
				<title>Coffee Connoisseur</title>
				<meta
					name='description'
					content='Generated by create next app'
				/>
				<meta
					name='viewport'
					content='width=device-width, initial-scale=1'
				/>
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={styles.main}>
				<Banner buttonText={btnText} onClick={handleOnBannerBtnClick} />
				{locErrorMSg && <p>Something went wrong...</p>}
				{coffeeStoresError && <p>{coffeeStoresError}</p>}
				<div className={styles.heroImage}>
					<Image
						src='/static/hero-image.png'
						width={700}
						height={400}
						alt='hero image'
					/>
				</div>
				<CoffeeStoreSection
					coffeeStores={coffeeStoresNearMe}
					title={'Stores near me'}
				/>
				<CoffeeStoreSection
					coffeeStores={coffeeStores}
					title={'Toronto Stores'}
				/>
			</main>
		</>
	);
};

const CoffeeStoreSection = ({
	coffeeStores,
	title,
}: {
	coffeeStores: Array<CoffeeStore>;
	title: string;
}) => {
	if (!coffeeStores.length) {
		return <></>;
	}
	return (
		<div className={styles.sectionWrapper}>
			<h2 className={styles.heading2}>{title}</h2>
			<div className={styles.cardLayout}>
				{coffeeStores.map((coffeeStore) => {
					return (
						<Card
							key={coffeeStore.id}
							name={coffeeStore.name}
							imgUrl={coffeeStore.imgUrl}
							href={`/coffee-store/${coffeeStore.id}`}
						/>
					);
				})}
			</div>
		</div>
	);
};

export default Home;
